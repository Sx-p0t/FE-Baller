local RobloxAnimation = true
RobloxAnimation = true
local Players = game:GetService('Players')
local Player = Players.LocalPlayer
local Character = Player.Character
Character.Archivable = true
local Rig = Character:Clone()
local RigHum = Rig:WaitForChild('Humanoid')
if not RobloxAnimation then
	spawn(function()
		Rig:WaitForChild('Animate'):Destroy()
	end)
end
RigHum.MaxHealth = math.huge
RigHum.Health = math.huge
RigHum.BreakJointsOnDeath = false
RigHum:SetStateEnabled(Enum.HumanoidStateType.Dead, false)
Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.Dead, false)
game:GetService('UserInputService').JumpRequest:Connect(function()
	RigHum.Jump = true
end)
for _, Accessory in pairs(Character.Humanoid:GetAccessories()) do
	local AccessoryAtt = Instance.new('Attachment')
	AccessoryAtt.Parent = Rig[Accessory.Name].Handle
	AccessoryAtt.Name = 'ImmortalAtt'
	spawn(function()
		Accessory.Handle:WaitForChild('AlignPosition', 9e9).Attachment1 = Rig[Accessory.Name].Handle:WaitForChild("ImmortalAtt", 9e9)
		Accessory.Handle:WaitForChild('AlignOrientation', 9e9).Attachment1 = Rig[Accessory.Name].Handle:WaitForChild("ImmortalAtt", 9e9)
	end)
end
Permadeath = function()
	local ch = game:GetService('Players').LocalPlayer.Character
	local prt = Instance.new("Model", workspace)
	local z1 = Instance.new("Part", prt)
	z1.Name = "Torso"
	z1.CanCollide = false
	z1.Anchored = true
	local z2 = Instance.new("Part", prt)
	z2.Name = "Head"
	z2.Anchored = true
	z2.CanCollide = false
	local z3 = Instance.new("Humanoid", prt)
	z3.Name = "Humanoid"
	z1.Position = Vector3.new(0, 9999, 0)
	z2.Position = Vector3.new(0, 9991, 0)
	prt.Name = 'Fixer'
	game:GetService('Players').LocalPlayer.Character = prt
	wait(game:GetService('Players').RespawnTime/2)
	warn("50%")
	game:GetService('Players').LocalPlayer.Character = ch
	wait(game:GetService('Players').RespawnTime/2 + 0.5)
	warn("100%")
end
Permadeath()
Character:BreakJoints()
Rig.Parent = Character
workspace.CurrentCamera.CameraSubject = Rig.Humanoid
local function FindFirstDescendant(Object, Name)
	local DescendantOnFound
	for _, v in pairs(Object:GetDescendants()) do
		if v:IsA('BasePart') then
			if v.Name == Name then
				DescendantOnFound = v
			end
		end
	end
	return DescendantOnFound
end
spawn(function()
	while true do
		task.wait()
		RigHum:MoveTo(RigHum.RootPart.Position+(Character.Humanoid.MoveDirection*2), nil)
	end
end)
for _, v in pairs(Rig:GetDescendants()) do
	if v:IsA('BasePart') or v:IsA('Decal') then
		v.Transparency = 1
	end
end
for _, v in pairs(Character:GetDescendants()) do
	if not v:IsDescendantOf(Rig) then
		if v:IsA('BasePart') then
			game:GetService("RunService").Stepped:Connect(function()
				v.CanCollide = false
			end)
			local A0 = Instance.new('Attachment')
			local AP = Instance.new('AlignPosition')
			local AO = Instance.new('AlignOrientation')
			local A1 = Instance.new('Attachment')
			A0.Parent = v
			AP.Parent = v
			AO.Parent = v
			AP.Attachment0 = A0
			AP.Attachment1 = A1
			AP.MaxForce = math.huge
			AP.Responsiveness = 200
			AO.Attachment0 = A0
			AO.Attachment1 = A1
			AO.MaxTorque = math.huge
			AO.Responsiveness = 200
			spawn(function()
				while true do
					game:GetService('RunService').Stepped:Wait()
					v.CanCollide = false
				end
			end)
			if v.Name == "Head" then
			else
				spawn(function()
					while true do
						v.Velocity = Vector3.new(45, 0, 0)
						task.wait(0)
					end
				end)
			end
			A1.Parent = FindFirstDescendant(Rig, v.Name)
		end
	end
end
local OldIndex = nil
OldIndex = hookmetamethod(game, "__index", function(Self, Key)
	if checkcaller() and Self == LocalPlayer and Key == "Character" then
		return Rig
	end

	return OldIndex(Self, Key)
end)
return Rig
